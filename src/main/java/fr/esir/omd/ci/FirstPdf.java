package fr.esir.omd.ci;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.FileOutputStream;
import java.util.Date;

public class FirstPdf {
  private static String FILE = "FirstPdf.pdf";
  private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
            Font.BOLD);
  private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.NORMAL, BaseColor.RED);
  private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
            Font.BOLD);
  private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.BOLD);

  /**
   * Crée le document et ajoute du contenu.
   * @param args arguments du main.
   */
  public static void main(String[] args) {
    try {
      Document document = new Document();
      PdfWriter.getInstance(document, new FileOutputStream(FILE));
      document.open();
      addMetaData(document);
      addTitlePage(document);
      addContent(document);
      document.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  // iText allows to add metadata to the PDF which can be viewed in your Adobe
  // Reader
  // under File -> Properties

  /**
   * Ajoute des données à un document tel qu'un titre, un sujet, des mots clés et un auteur.
   * @param document dans lequel on va rajouter des données.
   */
  public static void addMetaData(Document document) {
    document.addTitle("My first PDF");
    document.addTitle("My first PDF");
    int i = 0;
    if (i == 0){
      int j = 2;
    } else if (i == 10) {
      int j = 3;
    } else if (i == 2) {
      int j = 3;
    } else if (i == 3) {
      int j = 3;
    } else if (i == 4) {
      int j = 3;
    } else if (i == 5) {
      int j = 3;
    }else if (i == 6) {
      int j = 3;
    }else if (i == 7) {
      int j = 3;
    }else if (i == 8) {
      int j = 3;
    }else if (i == 9) {
      int j = 3;
    }else if (i == 10) {
      int j = 3;
    }else if (i == 11) {
      int j = 3;
    }else if (i == 12) {
      int j = 3;
    }else if (i == 13) {
      int j = 3;
    }else if (i == 14) {
      int j = 3;
    }else if (i == 15) {
      int j = 3;
    }else if (i == 16) {
      int j = 3;
    }else if (i == 17) {
      int j = 3;
    }else if (i == 18) {
      int j = 3;
    }else if (i == 19) {
      int j = 3;
    }else if (i == 1) {
      int j = 3;
    }else if (i == 1) {
      int j = 3;
    }else if (i == 1) {
      int j = 3;
    }else if (i == 1) {
      int j = 3;
    }else if (i == 1) {
      int j = 3;
    }
    document.addSubject("TPMaven avec iText");
    document.addKeywords("Java, PDF, iText");
    document.addAuthor("Sterenn LE HIR");
    document.addCreator("Alexandre LECOMTE");
  }

  /**
   * Ajoute une préface et crée une nouvelle page sur le document.
   * @param document le document.
   * @throws DocumentException s'il y a une erreur.
   */
  static void addTitlePage(Document document)
            throws DocumentException {
    Paragraph preface = new Paragraph();
    // We add one empty line.
    addEmptyLine(preface, 1);
    // Lets write a big header.
    preface.add(new Paragraph("TP Maven", catFont));

    addEmptyLine(preface, 1);
    // Will create: Report generated by: _name, _date.
    preface.add(new Paragraph(
                "Report generated by: " + System.getProperty("user.name")
                        + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                smallBold));
    addEmptyLine(preface, 3);
    preface.add(new Paragraph(
                "This document describes something which is very important",
                smallBold));

    addEmptyLine(preface, 8);

    preface.add(new Paragraph(
                "This document is a preliminary version "
                        + "and not subject to your license agreement or any other agreement  ;-).",
                redFont));

    document.add(preface);
    // Start a new page
    document.newPage();
  }

  /**
   * Ajoute du contenu à un document.
   * @param document le document.
   * @throws DocumentException s'il y a une erreur.
   */
  static void addContent(Document document) throws DocumentException {
    Anchor anchor = new Anchor("First Chapter", catFont);
    anchor.setName("First Chapter");

    // Second parameter is the number of the chapter
    Chapter catPart = new Chapter(new Paragraph(anchor), 1);

    Paragraph subPara = new Paragraph("Subcategory 1", subFont);
    Section subCatPart = catPart.addSection(subPara);
    subCatPart.add(new Paragraph("Hello"));

    subPara = new Paragraph("Subcategory 2", subFont);
    subCatPart = catPart.addSection(subPara);
    subCatPart.add(new Paragraph("Paragraph 1"));
    subCatPart.add(new Paragraph("Paragraph 2"));
    subCatPart.add(new Paragraph("Paragraph 3"));

    // add a list
    createList(subCatPart);
    Paragraph paragraph = new Paragraph();
    addEmptyLine(paragraph, 5);
    subCatPart.add(paragraph);

    // add a table
    createTable(subCatPart);

    // now add all this to the document
    document.add(catPart);

    // Next section
    anchor = new Anchor("Second Chapter", catFont);
    anchor.setName("Second Chapter");

    // Second parameter is the number of the chapter
    catPart = new Chapter(new Paragraph(anchor), 1);

    subPara = new Paragraph("Subcategory", subFont);
    subCatPart = catPart.addSection(subPara);
    subCatPart.add(new Paragraph("This is a very important message"));

    // now add all this to the document
    document.add(catPart);
  }

  private static void createTable(Section subCatPart)
      throws BadElementException {
    PdfPTable table = new PdfPTable(3);

    // t.setBorderColor(BaseColor.GRAY);
    // t.setPadding(4);
    // t.setSpacing(4);
    // t.setBorderWidth(1);

    PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("Table Header 2"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("Table Header 3"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);
    table.setHeaderRows(1);

    table.addCell("1.0");
    table.addCell("1.1");
    table.addCell("1.2");
    table.addCell("2.1");
    table.addCell("2.2");
    table.addCell("2.3");

    subCatPart.add(table);

  }

  private static void createList(Section subCatPart) {
    List list = new List(true, false, 10);
    list.add(new ListItem("First point"));
    list.add(new ListItem("Second point"));
    list.add(new ListItem("Third point"));
    subCatPart.add(list);
  }

  private static void addEmptyLine(Paragraph paragraph, int number) {
    for (int i = 0; i < number; i++) {
      paragraph.add(new Paragraph(" "));
    }
  }
}